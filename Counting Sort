class Solution
{
    public static char alphabetFromNumber(int n){
        return (char)(n+96);
    }
    public static int  lexicographicalNumber(char c){
        return (int)c-96;
    }
    public static String countSort(String arr)
    {   
        int arr1[]=new int[arr.length()];
        for(int i=0;i<arr.length();i++){
            arr1[i]=lexicographicalNumber(arr.charAt(i));
        }
        int count[] = new int[27];
        for(int m=0;m<arr.length();m++){
           count[arr1[m]]++;
        }
        int l=0;
        for(int n=0;n<count.length;n++){
            while(count[n]>0){
                arr1[l] = n ;
                l++;
                count[n]--;
            }
        }
        StringBuilder s1=new StringBuilder();
        for(int d=0;d<arr1.length;d++){
            s1.append(alphabetFromNumber(arr1[d]));
        }
        return s1.toString();
    }
}
time complexity = O(n)
space complexity = O(n)
